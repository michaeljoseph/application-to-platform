{"name":"Application To Platform","tagline":"http://za.pycon.org/talks/28/","body":"# Application To Platform\r\n---\r\n## Overview\r\n![image]()\r\n???\r\n\r\nThis is the story of how [Yola](https://yola.com) engineers transformed a website building application into a robust, distributed platform (for hosting and building websites).\r\n---\r\n## By\r\n\r\ndecomposing and augmenting our services layer into multiple Python-driven API services\r\n\r\nin a series of small low-risk changes (which i’ll discuss in more detail)\r\n\r\nwe organically built out the service layer.\r\n\r\n---\r\n## Other talks\r\n\r\n- yodeploy and yoconfigurator\r\n\r\n- yola’s hosting platform\r\n\r\n- release automation and continuous deployment\r\n\r\n???\r\nThis talk mostly concerns itself with the python API services layer, since i’m the Services Team Lead.\r\nThere are a number of other interesting talks that I have yet to convince some Yola colleagues to prepare\r\n---\r\n# overview\r\n\r\n- patterns\r\n\r\n- organisational attributes\r\n\r\n- roadmap\r\n\r\n???\r\nI shall attempt to:\r\n- extract and present some patterns that worked for us\r\n- discuss the organisational flexibility and engineering workflow that enabled us to refactor the system architecture, and\r\n- share the medium term roadmap for our system.\r\n---\r\n# History\r\n![image](2007-beta-architecture.png)\r\n???\r\nIn the beginning, we had an application. It was called The Sitebuilder. And it was good. Well, pretty good.\r\nWe had an application that lived on two servers in 2007 (along with a php website and wordpress blog and database).\r\nExcept smart people :)\r\n@nbm: architecture goals, decided that soa was the way to go (it was also a buzzword back in the day, it  was a thing guys).\r\nover the next 2 years we evolved a reasonably robust platform\r\n---\r\n# Makeover\r\n![image](yola-2007-2009-diff.png)\r\n![image](instances-artifacts-graph.png)\r\n???\r\nour architect created lovely architecture changelogs and when he left us for Facebook (which is becoming a damn theme at yola these days).\r\nSomeone please tweet @nbm and @vhata that I name dropped him\r\nA successor was not named. Then the fun started :)\r\nTimeline graph of synthasite / yola architecture: # instances; # deployable artifacts\r\n---\r\n--- \r\n# Before And After\r\n![Alt text](http://raw.github.com/michaeljoseph/pyconza2013/slide-4-before-after.jpg)\r\n???\r\nend 2009: paymentservice, checkoutservice, domainservice\r\nsitebuilder\r\nphp website\r\nwordpress blog\r\n\r\noct 2013: We have around 30 deployable applications, service apis, front-ends and automation/testing repositories.\r\n\r\n## applications and installables\r\n- frontends: sb is pretty much the same application, we’ve added helper services around it to absorb the load, we now have a logged in user management site: MyYola and a CMS for brochure-ware (the main website)\r\n\r\n- storage: from single spofs to one level of database redundancy, with automatic backups\r\n(where are the Yola people in the audience? We should test some restores sometime guys?)\r\n  - s3, no more NFS\r\n\r\n- pure services: userservice, , domainservice, michango, rankmonitor\r\n\r\n- applications: myyola, checkoutservice, yolacom [+ apis]\r\n\r\n---\r\n# patterns\r\n\r\n- build out and release new service calls independent of consumuing clients\r\n\r\n- refactor apps\r\n  - re-use standard python service clients to reduce development time\r\n\r\n- switch clients\r\n\r\n- rm old implementation / cleanup / decommission\r\n\r\n- same deal for rotating hardware\r\n\r\n   - spin up a fresh box\r\n   - provision\r\n   - test\r\n   - load balance in, load balance out\r\n]\r\n???\r\nsome notes\r\n--- \r\n# evolving services with service-clients\r\n\r\n- shittiest python code is (in only a few places, hopefully): python 2.6, django < 1.4, piston, sloppy testing practices, complicated code with production bug fixing barnacles that works\r\n\r\n- new apis: python 2.7, djrf, django\r\n- small api: flask\r\n- python service clients: [`demands`](https://github.com/yola/demands). <3 kennethreitz\r\n- new user facing app: django 1.5, cbvs, south, asset compression, front end dependency toolchain (lessc, bower, grunt)\r\n\r\n---\r\n# organisational enablers; engineering workflow\r\n\r\nBeing careful not to over engineer in advance [abstraction astronaut] we delayed major technology decision making\r\n\r\nIn hindsight it seems obvious: the decentralised, internet-based, just-in-time way of working that has risen to popularity in the wake of companies like github, facebook and valve.\r\n\r\nA flat organisational structure and hiring smart people means that you don’t really need to worry about who does what and when, as long as there is work to be done and some degree of priorisation, smart engineers just get the job done.\r\n\r\n-- decision making and meritocracies with a BDFL\r\n\r\nGithub pull requests and code review have transformed the way the team works.\r\nMany eyeballs make all the bugs shallower and there’s always a paper trail.\r\n\r\n[graph of deploys per day]\r\nwe're no github, but we do alright\r\n\r\n---\r\n\r\n# how we’d approach it today\r\n\r\npretty much the way i just described it.\r\n[org + workflow]\r\nrelease early and often: keep the changes small and pointy, lowers the cognitive overhead of review, increased confidence in pushing out new code, small surface area of introduced bugs to inspect (they’re shallow anyway because we have many eyeballs)\r\n\r\n---\r\n\r\n# roadmap\r\n\r\n![succession]()\r\n\r\n???\r\n- database succession\r\n- feature flags and user segmenting, better dogfooding\r\n\r\n---\r\n## Roadmap\r\n### Monitoring\r\n\r\n![monitoring]()\r\n\r\n???\r\n    - monitoring: we use pingdom, graphite, munin and sentry\r\n    - stuff mainly just goes in there (unless there’s a problem. for the size of cluster we operate, these tools are generally sufficient)\r\n        - we need a monitoring dashboard (next juicy devops project)\r\n---\r\n# roadmap: what was hard\r\n\r\n## Roadmap\r\n### - Monitoring\r\n### - What was hard\r\n\r\n- slow\r\n\r\n- boring\r\n\r\n???\r\nWaiting for improvements to compound, almost at the singularity\r\n---\r\n## summary\r\n![funny picture](about-to-summit.png)\r\n\r\nSlideshow created using [remark](http://github.com/gnab/remark).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}